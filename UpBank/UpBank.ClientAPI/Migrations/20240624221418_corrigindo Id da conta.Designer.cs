// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UpBank.ClientAPI.Data;

#nullable disable

namespace UpBank.ClientAPI.Migrations
{
    [DbContext(typeof(UpBankClientAPIContext))]
    [Migration("20240624221418_corrigindo Id da conta")]
    partial class corrigindoIddaconta
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Bank.Account", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgencyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreditCardNumber")
                        .HasColumnType("bigint");

                    b.Property<double>("Overdraft")
                        .HasColumnType("float");

                    b.Property<int>("Profile")
                        .HasColumnType("int");

                    b.Property<bool>("Restriction")
                        .HasColumnType("bit");

                    b.HasKey("Number");

                    b.HasIndex("AgencyNumber");

                    b.HasIndex("CreditCardNumber");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Models.Bank.Agency", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Restriction")
                        .HasColumnType("bit");

                    b.HasKey("Number");

                    b.HasIndex("AddressId");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("Models.Bank.CreditCard", b =>
                {
                    b.Property<long>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Number"), 1L, 1);

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Holder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Limit")
                        .HasColumnType("float");

                    b.HasKey("Number");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("Models.Bank.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ReceiverNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TransactionDt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverNumber");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Models.People.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Models.People.Client", b =>
                {
                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Restriction")
                        .HasColumnType("bit");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("CPF");

                    b.HasIndex("AccountNumber");

                    b.HasIndex("AccountNumber1");

                    b.HasIndex("AddressId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Models.People.Employee", b =>
                {
                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgencyNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Manager")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Registry")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("CPF");

                    b.HasIndex("AddressId");

                    b.HasIndex("AgencyNumber");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Models.Bank.Account", b =>
                {
                    b.HasOne("Models.Bank.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Bank.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("Models.Bank.Agency", b =>
                {
                    b.HasOne("Models.People.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Models.Bank.Transaction", b =>
                {
                    b.HasOne("Models.Bank.Account", "Receiver")
                        .WithMany("Extract")
                        .HasForeignKey("ReceiverNumber");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Models.People.Client", b =>
                {
                    b.HasOne("Models.Bank.Account", null)
                        .WithMany("Client")
                        .HasForeignKey("AccountNumber");

                    b.HasOne("Models.Bank.Account", null)
                        .WithMany("Clients")
                        .HasForeignKey("AccountNumber1");

                    b.HasOne("Models.People.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Models.People.Employee", b =>
                {
                    b.HasOne("Models.People.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Bank.Agency", null)
                        .WithMany("Employees")
                        .HasForeignKey("AgencyNumber");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Models.Bank.Account", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Clients");

                    b.Navigation("Extract");
                });

            modelBuilder.Entity("Models.Bank.Agency", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
